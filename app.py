import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error, r2_score

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(page_title="Order Analytics", layout="wide")
st.title("üì¶ Order Analytics & Revenue Forecast")

# ---------------------- Load d·ªØ li·ªáu ----------------------
@st.cache_data
def load_data():
    df = pd.read_csv("orders_sample_with_stock.csv")
    df["Date"] = pd.to_datetime(df["Date"], format="%m/%d/%Y")
    df["Total"] = df["Quantity"] * df["Price"]
    return df

df = load_data()

# ---------------------- Ti·ªÅn x·ª≠ l√Ω ----------------------
st.header("üßº Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")

# 1. Xo√° null
st.markdown("**1. Xo√° gi√° tr·ªã Null**")
df = df.dropna()

# 2. Xo√° d√≤ng tr√πng l·∫∑p
st.markdown("**2. Xo√° d√≤ng tr√πng l·∫∑p**")
duplicates = df.duplicated().sum()
df = df.drop_duplicates()
st.write(f"‚úÖ ƒê√£ xo√° `{duplicates}` d√≤ng tr√πng l·∫∑p")

# 3. Chu·∫©n h√≥a t√™n s·∫£n ph·∫©m
st.markdown("**3. Chu·∫©n h√≥a t√™n s·∫£n ph·∫©m (ch·ªØ th∆∞·ªùng)**")
df["Product"] = df["Product"].str.lower()

# 4. Reset index
df = df.reset_index(drop=True)

# ‚úÖ ƒê√¢y l√† d√≤ng b·ªã l·ªói tr∆∞·ªõc ƒë√≥ (st.su...) ƒë√£ ƒë∆∞·ª£c s·ª≠a:
st.success("‚úîÔ∏è Ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω")

st.dataframe(df.head())

# ---------------------- Tr·ª±c quan ho√° ----------------------
st.header("üìä Ph√¢n t√≠ch d·ªØ li·ªáu")

st.subheader("1Ô∏è‚É£ ƒê∆°n h√†ng theo ng√†y")
st.line_chart(df["Date"].value_counts().sort_index())

st.subheader("2Ô∏è‚É£ Doanh thu theo s·∫£n ph·∫©m")
st.bar_chart(df.groupby("Product")["Total"].sum().sort_values())

st.subheader("3Ô∏è‚É£ T·ªìn kho trung b√¨nh theo s·∫£n ph·∫©m")
st.bar_chart(df.groupby("Product")["Stock"].mean().sort_values())

st.subheader("4Ô∏è‚É£ Ph√¢n b·ªë gi√° b√°n")
fig1, ax1 = plt.subplots()
sns.histplot(df["Price"], bins=20, kde=True, ax=ax1)
st.pyplot(fig1)

st.subheader("5Ô∏è‚É£ Quantity vs Total")
fig2, ax2 = plt.subplots()
sns.scatterplot(data=df, x="Quantity", y="Total", hue="Product", ax=ax2)
st.pyplot(fig2)

# ---------------------- D·ª± ƒëo√°n ----------------------
st.header("ü§ñ D·ª± ƒëo√°n t·ªïng ti·ªÅn (Linear Regression)")

X = df[["Quantity", "Price", "Product"]]
y = df["Total"]

preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), ["Product"])
], remainder="passthrough")

pipeline = Pipeline([
    ("preprocessor", preprocessor),
    ("regressor", LinearRegression())
])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=
